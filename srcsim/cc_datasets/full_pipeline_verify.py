import numpy as np
from matplotlib import pyplot as plt
from scipy.fft import fft, fftfreq


fft_output_file = 'C:/Users/ilena/Documents/apr-private/fpga/SW8A-AcousticsFPGA/srcsim/cc_datasets/full_pipeline_ifft.txt' # output generated by the FFT IP core
chx_output_file = 'C:/Users/ilena/Documents/apr-private/fpga/SW8A-AcousticsFPGA/srcsim/cc_datasets/full_pipeline_chx.txt' # output generated by the FFT IP core
chy_output_file = 'C:/Users/ilena/Documents/apr-private/fpga/SW8A-AcousticsFPGA/srcsim/cc_datasets/full_pipeline_chy.txt' # output generated by the FFT IP core
chx_slave_file = 'C:/Users/ilena/Documents/apr-private/fpga/SW8A-AcousticsFPGA/srcsim/cc_datasets/full_pipeline_chx_slave.txt'
chy_slave_file = 'C:/Users/ilena/Documents/apr-private/fpga/SW8A-AcousticsFPGA/srcsim/cc_datasets/full_pipeline_chy_slave.txt'


N = 256 # 256 point FFT
Fs = 446000

t_step = (1/Fs)
freq = 30000
t = np.arange(N)

# do a SciPy FFT on the input dataset and plot it
'''input_data = np.loadtxt(fft_input_file, dtype='int32', converters={_:lambda s: int(s, 16) for _ in range(1)})
scipy_fft = fft(input_data) ** 2
scipy_fft_freq = fftfreq(N, t_step)
plt.subplot(311)
plt.stem(scipy_fft_freq, scipy_fft)
plt.title('SciPy FFT')
plt.xlabel('f, Hz')
'''

# load in the data
ifft_out    = np.loadtxt(fft_output_file)
ifft_out_reals = ifft_out[1::2] 
ifft_out_imag = ifft_out[0::2]
ifft_out_mag = np.zeros(N)


chx_out    = np.loadtxt(chx_output_file)
chx = chx_out[1::2] + 1j*chx_out[0::2]


chy_out    = np.loadtxt(chy_output_file)
chy = chy_out[1::2] + 1j*chy_out[0::2]

chx_slave = np.loadtxt(chx_slave_file)
chy_slave = np.loadtxt(chy_slave_file)


output = chx * np.conjugate(chy)
output = np.fft.ifft(output)
plt.plot(output)
plt.show()



plt.subplot(311)
plt.plot(chx_out[1::2])
plt.subplot(312)
plt.plot(chy_out[1::2])
plt.show()